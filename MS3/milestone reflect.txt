/*
*****************************************************************************
                     Milestone 3
Full Name  : Rutarj Shah 

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

1) This milestone required you to create additional functions that were not specified or provided for you.Briefly describe three functions you created and include the purpose and value those functions contributed towards the application. Organize your answer for each function by first including the function prototype (not the definition) followed by your explanation. (Minimum: 200 words)

ANS: i) void sortAppts(struct Appointment appoints[], int num);

The above function prototype is about the first function that I declared of my own. The main purpose of this function was to sort appointment records from lowest to highest, that is, starting from the lowest year and then the lowest month followed by the time that is the lowest hours and lowest minutes. Basically, what this function does is that it groups the appointment records in a certain way that helps the viewer to know who's scheduled appointment is the nearest and on what day and time. This function returns nothing and it accepts the appoints[] array of Appointment type and the second argument that it accepts is an integer which represents the total number of appointment records. This function is supported by another function that is findLowsetAppts(appoints, num) which received appoints array as the first parameter and the number of appointments in the form of an integer as the second parameter. This function is explained in detail in the second paragraph of this answer. This function will then return the index of the record which has the nearest date and time of the appointment. Now, the logic is to display this index first so the record of this index was further stored in the first index of a temporary array of type Appointment. After that, this record was removed from the appoints array by assigning the value 0 to the patient number. Similarly, this loop will keep going till all the records of the appoints array are sorted and stored in the temporary array and the actual records from the appoints array are emptied. 

Now, after having the sorted records in the temporary array, it is time to return those records to the appoints array in the same sequence which was done with the help of the "for" loop. Thus, in this way the appoints array was sorted.

ii) int findLowsetAppts(struct Appointment appoints[], int num);

This function was called in the sortAppts function to support the overall action of sorting the array. This function received two parameters that is appoints[] and the other one was an integer variable representing the total number of appointments. This function returned the index value of the lowest appointment respective of date and time. The function started with a loop looping until it finds the lowest year from the appoints array and then it stored that year in another variable named "lowestYear". A similar task was performed for the other 4 variables which were lowestMonth, lowestDay, lowestHour and lowestMin to store the lowest month, followed by the lowest day, followed by lowest hour and at last the lowest minute respectively. All of them were done in sequence to get accurate results. The conditions also checked if the patient number of the record was equal to 0 or not to avoid repetition of passing the same index and at last, the index of the lowest record was stored in a variable named "index". This value was then returned to the sortAppts to continue further tasks to be performed.  

iii) void inputCorrectTime(struct Time* time);

I used this function to decrease the length of the "addAppointment" function as it was too lengthy. This function was called every time when the user entered an unavailable time to get an appointment(that is not between 10:00 and 14:00 and not in the interval of 30 minutes). This function received the address of time as an argument of type Time. The role of this function was to prompt the user to enter the hour of scheduling an appointment followed by the minutes.   

2) The "addAppointment" function must perform many operations. How many lines of code did you use for this function? How many lines did you save by applying pattern recognition and the use of functions? Identify all the sections of logic you were able to consolidate into useful functions to help with readability and maintainability of the code. (Minimum: 200 words)

ANS: The "addAppointment" function was the most lengthy function that I coded amongst all the other functions that were defined in this milestone as there were many tasks to be performed by this function. The user seeking an appointment was first prompted to enter the patient number. Then the patient number was to be verified if it was correct or invalid by searching it with the help of the findPatientIndexByPatientNumber function. After the verification, the user was then prompted to enter the year in which he wants to schedule an appointment, followed by the month. The year and month were prompted by using the other two functions inputIntPositive and inputIntRange(1,12) respectively to make sure that the number of year entered was positive and the number of month entered was between January and December that is 1 and 12. By calling these two functions, I reduced the number of lines the"addAppointment" function was consuming. Then, similarly, date was prompted making sure that it has the correct range of numbers. For example, the month of January consists of 31 days so the range displayed should be (1-31) whereas the month of February consists of (1-28) days and during the leap year, it contains days in the range of (1-29). 

After prompting the user about the date, the function then prompted them to enter the correct hour and time at which the user wants to schedule the appointment. The prompting of time itself consisted of several exceptions like the time should be exactly between 10:00 to 14:00 in 30 minutes intervals. This exception involved me putting several further conditions which resulted in the code getting lengthier. Then, I applied the concept of pattern recognition and noticed that instead of prompting the user again and again about the hour and minute, I should just simply create a user input function that would input the hours and minutes entered by the user. Thus, I created a function called "void inputCorrectTime(struct Time* time)" that would receive only one argument that is the address time of type Time. If the time doesn't fit the criteria of available time for scheduling an appointment, then an error was displayed, prompting the user to further input the hours and minutes by calling this function again.

Thus, including these functions in my "addAppointment" function made my life easy as initially, it was around 200 lines of code declining to around 100. These functions also improved the readability and maintainability of my code.   

3) This milestone demanded a concerted effort in time management to insure you could complete the work on-time. Breakdown how you spent your week of development and include each function/section of logic you worked on describing the overall success/challenges you had along the way. (Minimum: 200 words) 

ANS: There were a total of 4 mandatory functions to be defined in this milestone with 2 other file functions. I was free to define my own functions according to my convenience and to maintain the readability and maintainability of my code. As this was the last milestone, I had in mind that it would demand more of my effort and time to complete it. Thus, I started with understanding the concept of the milestone 3 functions by going through the instructions and the output.txt file on the first day. After understanding the instructions, I wrote a pseudocode containing all the functions and their roles on the same day. This cleared my concepts and showed me a road map to achieve the output that I need. Writing pseudocode helped me to know the logic of all the functions. On the second day, I started coding the first two functions which were of importing files into the code using FILE type. It worked well and I didn't face any difficulty in this part. After that, on the third day, I started working on the third and fourth functions, which were to view all the appointment records and to view appointments by date. Here, I found that the records are not just to be displayed as they are, but they are to be sorted first by date and time from lowest to highest and then they are to be displayed. It took a while for me to understand, I went through my notes, and I went through several sorting logics online but I was facing difficulty to find the perfect logic. Then on the day of class which was our lab day, professor Ziad Diab told us and explained to us the logic to be used behind sorting the records and then it didn't take me much time to apply that logic in my code and get the correct output. On the fourth day, I started working on the second last function which was "addAppointment" and was surprised to see the length of the function. It consumed too many lines of code forcing me to create another function in it to lessen the length of the code, which worked as well leaving me with one last function that was of "removeAppointment". The last function didn't even take me half an hour to complete as the logic was simple to apply. We just had to set the elements of the appointments array elements to be deleted to a safe empty state.

After completing my code, my challenge was not over yet, as I faced another trouble when running my code on the matrix server. It showed me certain compilation errors which consumed some more of my time. At last, I took the help of professor Ziad Diab by communicating with him on teams and tackled compilation errors and submitted the most challenging assignment of the semester.    